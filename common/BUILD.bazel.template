load(":cc_toolchain_config.bzl", "cc_toolchain_config")

package(default_visibility = ["//visibility:public"])

# File groups for different tool categories
filegroup(
    name = "all_files",
    srcs = glob(["**/*"]),
)

filegroup(
    name = "compiler_files",
    srcs = [
        "usr/bin/gcc",
        "usr/bin/g++",
        "usr/bin/cpp",
    ] + glob([
        "usr/lib/gcc/**/*",
        "usr/libexec/gcc/**/*",
        "usr/include/**/*",
    ]),
)

filegroup(
    name = "linker_files",
    srcs = [
        "usr/bin/gcc",
        "usr/bin/g++",
        "usr/bin/ld",
        "usr/bin/ld.bfd",
    ] + glob([
        "usr/lib64/**/*.so*",
        "usr/lib64/**/*.a",
        "usr/lib/**/*.so*",
        "usr/lib/**/*.a",
    ]),
)

filegroup(
    name = "ar_files",
    srcs = ["usr/bin/ar"],
)

filegroup(
    name = "objcopy_files",
    srcs = ["usr/bin/objcopy"],
)

filegroup(
    name = "strip_files",
    srcs = ["usr/bin/strip"],
)

filegroup(
    name = "empty",
    srcs = [],
)

# Toolchain configuration
cc_toolchain_config(
    name = "gcc_toolchain_config",
    gcc_version = "{GCC_VERSION}",
    target_arch = "{TARGET_ARCH}",
    include_dirs = [
        "usr/lib/gcc/{TARGET_ARCH}-redhat-linux/{GCC_MAJOR}/include",
        "usr/include",
        "usr/include/c++/{GCC_MAJOR}",
        "usr/include/c++/{GCC_MAJOR}/{TARGET_ARCH}-redhat-linux",
        "usr/include/c++/{GCC_MAJOR}/backward",
    ],
    c_flags = [{C_FLAGS}],
    cxx_flags = [{CXX_FLAGS}],
    link_flags = [{LINK_FLAGS}],
)

# The actual toolchain
cc_toolchain(
    name = "gcc_toolchain",
    all_files = ":all_files",
    ar_files = ":ar_files",
    compiler_files = ":compiler_files",
    dwp_files = ":empty",
    linker_files = ":linker_files",
    objcopy_files = ":objcopy_files",
    strip_files = ":strip_files",
    supports_param_files = 1,
    toolchain_config = ":gcc_toolchain_config",
)

# Toolchain definition for registration
toolchain(
    name = "gcc_toolchain_linux_{TARGET_ARCH}",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:{BAZEL_CPU}",
    ],
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:{BAZEL_CPU}",
    ],
    toolchain = ":gcc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)