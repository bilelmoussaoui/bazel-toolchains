load(":cc_toolchain_config.bzl", "cc_toolchain_config")

package(default_visibility = ["//visibility:public"])

# The host toolchain uses system tools directly
filegroup(
    name = "all_files",
    srcs = [],
)

filegroup(
    name = "compiler_files",
    srcs = [],
)

filegroup(
    name = "linker_files",
    srcs = [],
)

filegroup(
    name = "ar_files",
    srcs = [],
)

filegroup(
    name = "objcopy_files",
    srcs = [],
)

filegroup(
    name = "strip_files",
    srcs = [],
)

filegroup(
    name = "empty",
    srcs = [],
)

# Toolchain configuration
cc_toolchain_config(
    name = "gcc_toolchain_config",
    gcc_version = "{GCC_VERSION}",
    target_arch = "{TARGET_ARCH}",
    include_dirs = [{INCLUDE_DIRS}],
    c_flags = [{C_FLAGS}],
    cxx_flags = [{CXX_FLAGS}],
    link_flags = [{LINK_FLAGS}],
)

# The actual toolchain
cc_toolchain(
    name = "gcc_toolchain",
    all_files = ":empty",
    ar_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    toolchain_config = ":gcc_toolchain_config",
)

# Toolchain definition for registration
toolchain(
    name = "gcc_toolchain_linux_{TARGET_ARCH}",
    exec_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:{BAZEL_CPU}",
    ],
    target_compatible_with = [
        "@platforms//os:linux",
        "@platforms//cpu:{BAZEL_CPU}",
    ],
    toolchain = ":gcc_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)