load("@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl",
     "feature", "flag_group", "flag_set", "tool_path", "with_feature_set")
load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")

def _impl(ctx):
    tool_paths = [
        tool_path(name = "gcc", path = "usr/bin/gcc"),
        tool_path(name = "g++", path = "usr/bin/g++"),
        tool_path(name = "ld", path = "usr/bin/ld"),
        tool_path(name = "ar", path = "usr/bin/ar"),
        tool_path(name = "cpp", path = "usr/bin/cpp"),
        tool_path(name = "gcov", path = "usr/bin/gcov"),
        tool_path(name = "nm", path = "usr/bin/nm"),
        tool_path(name = "objdump", path = "usr/bin/objdump"),
        tool_path(name = "strip", path = "usr/bin/strip"),
    ]

    # Compiler flags
    default_compile_flags = feature(
        name = "default_compile_flags",
        enabled = True,
        flag_sets = [
            flag_set(
                actions = [ACTION_NAMES.c_compile],
                flag_groups = [
                    flag_group(
                        flags = [
                            "-B" + "external/{REPO_NAME}/usr/bin",
                            "-nostdinc",
                            "-isystem", "external/{REPO_NAME}/usr/lib/gcc/" + ctx.attr.target_arch + "-redhat-linux/" + ctx.attr.gcc_version.split('.')[0] + "/include",
                            "-isystem", "external/{REPO_NAME}/usr/include",
                            "-Wall",
                            "-Wextra",
                            "-Wno-builtin-macro-redefined",
                            "-D__DATE__=redacted",
                            "-D__TIMESTAMP__=redacted",
                            "-D__TIME__=redacted",
                        ] + ctx.attr.c_flags,
                    ),
                ],
            ),
            flag_set(
                actions = [ACTION_NAMES.cpp_compile],
                flag_groups = [
                    flag_group(
                        flags = [
                            "-B" + "external/{REPO_NAME}/usr/bin",
                            "-nostdinc++",
                            "-isystem", "external/{REPO_NAME}/usr/include/c++/" + ctx.attr.gcc_version.split('.')[0],
                            "-isystem", "external/{REPO_NAME}/usr/include/c++/" + ctx.attr.gcc_version.split('.')[0] + "/" + ctx.attr.target_arch + "-redhat-linux",
                            "-isystem", "external/{REPO_NAME}/usr/include/c++/" + ctx.attr.gcc_version.split('.')[0] + "/backward",
                            "-nostdinc",
                            "-isystem", "external/{REPO_NAME}/usr/lib/gcc/" + ctx.attr.target_arch + "-redhat-linux/" + ctx.attr.gcc_version.split('.')[0] + "/include",
                            "-isystem", "external/{REPO_NAME}/usr/include",
                            "-Wall",
                            "-Wextra",
                            "-Wno-builtin-macro-redefined",
                            "-D__DATE__=redacted",
                            "-D__TIMESTAMP__=redacted",
                            "-D__TIME__=redacted",
                        ] + ctx.attr.cxx_flags,
                    ),
                ],
            ),
        ],
    )

    default_link_flags = feature(
        name = "default_link_flags",
        enabled = True,
        flag_sets = [
            flag_set(
                actions = [
                    ACTION_NAMES.cpp_link_executable,
                    ACTION_NAMES.cpp_link_dynamic_library,
                ],
                flag_groups = [
                    flag_group(
                        flags = [
                            "-B" + "external/{REPO_NAME}/usr/bin",
                            "-L" + "external/{REPO_NAME}/usr/lib/gcc/" + ctx.attr.target_arch + "-redhat-linux/" + ctx.attr.gcc_version.split('.')[0],
                            "-L" + "external/{REPO_NAME}/usr/lib64",
                            "-L" + "external/{REPO_NAME}/usr/lib",
                            "-lstdc++",
                            "-lm",
                        ] + ctx.attr.link_flags,
                    ),
                ],
            ),
        ],
    )

    # Feature to disable absolute path warnings for system headers
    supports_header_path_normalization = feature(
        name = "supports_header_path_normalization",
        enabled = True,
    )

    return cc_common.create_cc_toolchain_config_info(
        ctx = ctx,
        features = [default_compile_flags, default_link_flags, supports_header_path_normalization],
        cxx_builtin_include_directories = ctx.attr.include_dirs,
        toolchain_identifier = "fedora-gcc-{}".format(ctx.attr.gcc_version),
        host_system_name = "local",
        target_system_name = "local",
        target_cpu = ctx.attr.target_arch,
        target_libc = "glibc",
        compiler = "gcc",
        abi_version = "unknown",
        abi_libc_version = "unknown",
        tool_paths = tool_paths,
    )

cc_toolchain_config = rule(
    implementation = _impl,
    attrs = {
        "gcc_version": attr.string(mandatory = True),
        "target_arch": attr.string(mandatory = True),
        "include_dirs": attr.string_list(),
        "c_flags": attr.string_list(),
        "cxx_flags": attr.string_list(),
        "link_flags": attr.string_list(),
    },
    provides = [CcToolchainConfigInfo],
)